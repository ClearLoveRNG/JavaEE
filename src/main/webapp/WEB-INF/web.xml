<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                                   http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         metadata-complete="false"
         version="3.1">
    <!--                               web.xml配置文件加载顺序

        1. Web项目启动的时候，容器（如：tomcat）读取webapp/WEB-INF/web.xml文件，读取<context-param>和<listener>；

        2. 创建ServletContex，Web项目所有部分都可以使用该上下文ServletContex；

        3. 容器将<context-param></context-param>解析为key-value对,并交给ServletContext；

        4. 容器根据<listener></listener>中的类创建监听实例,即启动监听；

        5. listener监听类中会contextInitialized(ServletContextEvent servletContextEvent)初始化方法,可通过ServletContextEvent.getServletContext().getInitParameter("field")获得value的值；

        6. 解析<filters></filters>,并启动拦截器 拦截器开始起作用,当有请求进入时,执行Filter的doFilter方法；

        7. 最后加载和初始化配置在load on startup的servlets;

        8. 加载Spring,如果filter需要用到bean,但加载顺序是： 先加载filter 后加载spring，则filter中初始化操作中的bean为null.
           如果过滤器中要使用到 bean，可以将spring 的加载 改成 Listener的方式 :
           <listener>  
                <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
           </listener>
    -->



    <!--
        1.在JavaEE里要使用Spring，就要使Web加载Spring的配置文件
        换句话说，就是让Web启动的同时，加载Spring，所以，需要使用监听器，并且要继承ServletContextListener，
        因为监听的是上下文的加载。而Spring给你写好了这个监听器，叫ContextLoaderListener，直接用就行了，所以要加入如下代码
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--
        2.但是呢，这个Spring的监听器ContextLoaderListener默认加载/WEB-INF/applicationContext.xml
        所以如果要图省事，就照它说的做：在WEB-INF目录下创建applicationContext.xml，下面的代码就可以省略，但按给定的格式写上也完全没问题。
        但如果想自定义路径，就必须要加如下的代码，表示在上下文加载的时候设置参数，参数名是contextConfigLocation，
        为什么叫这个，是因为这是Spring定义好的字段，Spring的监听器ContextLoaderListener会获取上下文的参数，而这个参数的名字，就是contextConfigLocation，
        而参数的值是你xml文件的路径，classpath表示的是classes目录，还有一种写法classpath*，这个表示
        不仅会从classess目录找，还会去jar包底下找，虽然查找范围广，但是速度肯定要慢一些，所以还是要统一管理好配置文件，
        如果有多个配置文件需要加载，则用在每个配置文件之间用逗号隔开。
        如果既没有applicationContext.xml文件，也没有使用contextConfigLocation参数确定配置文件，或者contextConfigLocation确定的配置文件不存在。
        都将导致Spring无法加载配置文件或无法正常创建ApplicationContext 实例
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!--
        3.这个简单，请求发来的时候，需要将不同的编码统一成UTF-8模式，所以就要在每个controller或者servlet中，都转一次，但这样太麻烦了，
        所以Spring提供了一个过滤器，将请求的传进来的内容转换成UTF-8，而且要设置为过滤所有请求。
        CharacterEncodingFilter就是Spring提供的过滤器，同时要设置过滤器参数，参数名为encoding，这也是Spring定义好的，
        过滤器初始化的时候会将CharacterEncodingFilter里的encoding属性初始化为UTF-8
    -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        4.在JavaEE中使用SpringMVC，就要让使用设置一个Servlet，把接受的请求分发到某个Controller层的某个方法上，
        Spring也给我们提供了，叫DispatcherServlet，所以加上如下的代码，但是呢，Servlet的初始化是在调用servlet时候才进行，
        而我们的许多配置要在启动Web的时候就加载，所以要设置该Servlet为自启动，使得在Web加载的同时，该Servlet也开始加载。
        而加载的时候配置的文件，同样要通过参数的方式告诉SpringMVC，你要加载哪个配置文件，这个配置文件和Spring的配置文件不一样，这个是SpringMVC的配置，要区分开。
        和加载Spring配置文件一样，SpringMVC加载的时候默认加载<servlet-name>标签里的名字加上横杠-，再加上servlet，比如下面的serlvet，SpringMVC会加载
        /WEB-INF/mvc-dispatcher-serlvet.xml配置文件。当然自定义路径完全也可以，也要使用参数方式，
        参数名也是contextConfigLocation，是SpringMVC定义好的，参数值是配置文件的路径。
        <load-on-startup>标签就是用来自启动的，中间的数字，越小越优先加载，所以设置1就行了。
    -->
    <!-- spring mvc核心：分发servlet -->
    <servlet>
        <servlet-name>mvc-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- spring mvc的配置文件 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>mvc-dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>